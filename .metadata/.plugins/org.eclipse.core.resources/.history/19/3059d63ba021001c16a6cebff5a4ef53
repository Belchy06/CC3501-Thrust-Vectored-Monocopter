/* ###################################################################
 **     Filename    : Events.c
 **     Project     : Assignment
 **     Processor   : MK22FN512VDC12
 **     Component   : Events
 **     Version     : Driver 01.00
 **     Compiler    : GNU C Compiler
 **     Date/Time   : 2021-09-20, 19:05, # CodeGen: 44
 **     Abstract    :
 **         This is user's event module.
 **         Put your event handler code here.
 **     Contents    :
 **         Inhr1_OnRxChar - void Inhr1_OnRxChar(void);
 **         Cpu_OnNMI      - void Cpu_OnNMI(void);
 **
 ** ###################################################################*/
/*!
 ** @file Events.c
 ** @version 01.00
 ** @brief
 **         This is user's event module.
 **         Put your event handler code here.
 */
/*!
 **  @addtogroup Events_module Events module documentation
 **  @{
 */
/* MODULE Events */

#include "Cpu.h"
#include "Events.h"
#include "Init_Config.h"
#include "PDD_Includes.h"

#ifdef __cplusplus
extern "C" {
#endif 

#include "GPS.h"
#include "BNO085.h"

/* User includes (#include below this line is not maintained by Processor Expert) */
extern volatile GPS gps;
extern volatile BNO085 IMU;
extern volatile uint8_t index;
extern volatile char buffer[128];
extern volatile bool complete_command;
extern volatile bool newLinAcc, newGyro, newRot;

/*
 ** ===================================================================
 **     Event       :  Inhr1_OnRxChar (module Events)
 **
 **     Component   :  Inhr1 [AsynchroSerial]
 **     Description :
 **         This event is called after a correct character is received.
 **         The event is available only when the <Interrupt
 **         service/event> property is enabled and either the <Receiver>
 **         property is enabled or the <SCI output mode> property (if
 **         supported) is set to Single-wire mode.
 **     Parameters  : None
 **     Returns     : Nothing
 ** ===================================================================
 */
void Inhr1_OnRxChar(void) {
	/* Write your code here ... */
	/* Write your code here ... */
	char c;
	if (ERR_OK == Inhr1_RecvChar(&c)) {
		switch (c) {
		case '\r':
			// new line received
			if (index > 0) {
				buffer[index] = '\0';
				//PC_SendChar(c);
				// complete_command = true;
				if (gps.encode(&gps, c))
					complete_command = true;
			}
			break;

		case 0x7F:
			// Backspace
		{
			if (index > 0) {
				buffer[index] = '\0';
				index--;
				PC_SendChar(0x7f);
			}
		}
			break;

		default:
			// Normal characters
		{
			if (index < 128) {
				buffer[index] = c;
				if (gps.encode(&gps, c))
					complete_command = true;
				index++;
				//PC_SendChar(c);
			}
		}
			break;
		}
	}
}

/*
 ** ===================================================================
 **     Event       :  Cpu_OnNMI (module Events)
 **
 **     Component   :  Cpu [MK22FN512DC12]
 */
/*!
 **     @brief
 **         This event is called when the Non maskable interrupt had
 **         occurred. This event is automatically enabled when the [NMI
 **         interrupt] property is set to 'Enabled'.
 */
/* ===================================================================*/
void Cpu_OnNMI(void) {
	/* Write your code here ... */
}

/*
 ** ===================================================================
 **     Event       :  EInt1_OnInterrupt (module Events)
 **
 **     Component   :  EInt1 [ExtInt]
 **     Description :
 **         This event is called when an active signal edge/level has
 **         occurred.
 **     Parameters  : None
 **     Returns     : Nothing
 ** ===================================================================
 */
void EInt1_OnInterrupt(void) {
	/* Write your code here ... */
	switch (myIMU.getReadings()) {
	case SENSOR_REPORTID_LINEAR_ACCELERATION: {
		newLinAcc = 1;
	}
		break;

	case SENSOR_REPORTID_ROTATION_VECTOR:
	case SENSOR_REPORTID_GAME_ROTATION_VECTOR: {
		newRot = 1;
	}
		break;
	case SENSOR_REPORTID_GYROSCOPE: {
		newGyro = 1;
	}
	break;
	default:
		// Unhandled Input Report
		break;
	}
}

/* END Events */

#ifdef __cplusplus
} /* extern "C" */
#endif 

/*!
 ** @}
 */
/*
 ** ###################################################################
 **
 **     This file was created by Processor Expert 10.5 [05.21]
 **     for the Freescale Kinetis series of microcontrollers.
 **
 ** ###################################################################
 */
