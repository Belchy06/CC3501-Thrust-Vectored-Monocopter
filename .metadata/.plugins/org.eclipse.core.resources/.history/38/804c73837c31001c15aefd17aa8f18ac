/* ###################################################################
 **     Filename    : main.c
 **     Project     : Lab_03
 **     Processor   : MK22FN512VDC12
 **     Version     : Driver 01.01
 **     Compiler    : GNU C Compiler
 **     Date/Time   : 2021-08-13, 13:30, # CodeGen: 0
 **     Abstract    :
 **         Main module.
 **         This module contains user's application code.
 **     Settings    :
 **     Contents    :
 **         No public methods
 **
 ** ###################################################################*/
/*!
 ** @file main.c
 ** @version 01.01
 ** @brief
 **         Main module.
 **         This module contains user's application code.
 */
/*!
 **  @addtogroup main_module main module documentation
 **  @{
 */
/* MODULE main */

/* Including needed modules to compile this module/procedure */
#include "Cpu.h"
#include "Events.h"
#include "Pins1.h"
#include "CI2C1.h"
#include "IntI2cLdd1.h"
#include "MCUC1.h"
#include "BT.h"
#include "Inhr2.h"
#include "ASerialLdd2.h"
#include "Inhr1.h"
#include "ASerialLdd1.h"
#include "TU4.h"
#include "statusBlue.h"
#include "BitIoLdd1.h"
#include "statusRed.h"
#include "BitIoLdd2.h"
#include "statusGreen.h"
#include "BitIoLdd3.h"
#include "FC321.h"
#include "RealTimeLdd1.h"
#include "TU1.h"
#include "WAIT1.h"
#include "XPos.h"
#include "Pwm1.h"
#include "PwmLdd1.h"
#include "XNeg.h"
#include "Pwm2.h"
#include "PwmLdd2.h"
#include "GPSTimer.h"
#include "RealTimeLdd2.h"
#include "TU2.h"
#include "GPS.h"
/* Including shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
#include "PDD_Includes.h"
#include "Init_Config.h"
/* User includes (#include below this line is not maintained by Processor Expert) */
#include <math.h>
#include <stdbool.h>
#include <stdlib.h>
#include <stdio.h>
#include "Sensors.h"
#include "BNO085.h"
#include "BMP384.h"
#include "GPS.h"

#include "printf.h"

#include "Controllers.h"
#include "VelocityEstimator.h"
#include "PositionEstimator.h"
#include "utm.h"

#define BNO080_DEFAULT_ADDRESS 0x4A
#define BMP384_DEFAULT_ADDRESS 0x77

float temperature, pressure, altitude;
float pitch, roll, yaw;
float p, q, r;
float ax, ay, az;
float lx, ly, lz;
uint8_t accelAccuracy, gyroAccuracy, magAccuracy, linAccuracy;

char level[32];
char str[256];
unsigned int time;

float lat, lon, prevLat, prevLon, distance;
float gYaw;
float dt;
unsigned long age;
float xOff, yOff;
float xMps, yMps, zMps = 0;
float mps;
volatile GPS gps;
volatile BNO085 IMU;

volatile uint8_t gpsIndex;
volatile char gpsBuffer[128];
volatile bool bGpsCompleteCommand;

volatile uint8_t btIndex;
volatile char btBuffer[128];
volatile bool bbtCompleteCommand;

bool haveGps = false;

struct setpoints {
	float x;
	float y;
	float altitude;
	float yaw;
};

struct GPSStats {
	float dx;
	float dy;
	float x;
	float y;
	float prevEasting;
	float prevNorthing;
};

double easting;
double northing;

float clamp(float f, float min, float max) {
	const float t = f < min ? min : f;
	return t > max ? max : t;
}

float servoScale(float f) {
	// + 1000
	return (((f) * (1000)) / (500)) + 500;
}

void sendBT() {
	snprintf(str, 128, "roll: %f, pitch: %f, yaw: %f, gYaw: %f\r\n", roll,
			pitch, yaw, gYaw);
	// BT_SendStr(str);
}

/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
/*lint -restore Enable MISRA rule (6.3) checking. */
{
	/* Write your local variable definition here */
	bool bTakeoffFlag = true;
	bool bRunMainLoop = false;

	/*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
	PE_low_level_init();
	/*** End of Processor Expert internal initialization.                    ***/
	// Initialize status LEDs
	bool bstatusBlue, bstatusRed, bstatusGreen = false;

	// Initialize setpoints
	struct setpoints setpoint;
	setpoint.x = setpoint.y = setpoint.altitude = setpoint.yaw = 0;

	// Controller Init
	VelocityEstimator EstimatorVelocity;
	initializeVelocityEstimator(&EstimatorVelocity);

	PositionEstimator EstimatorPosition;
	initializePositionEstimator(&EstimatorPosition);

	NEW_GPS(&gps);

	bGpsCompleteCommand = false;
	bbtCompleteCommand = false;
	bool firstTime = true;
	struct GPSStats GPSstats;
	GPSstats.x = 0;
	GPSstats.y = 0;
	GPSstats.dx = 0;
	GPSstats.dy = 0;
	GPSstats.prevEasting = 0;
	GPSstats.prevNorthing = 0;

	BMP384 BARO;
	New_BMP384(&BARO, BMP384_DEFAULT_ADDRESS);
	if (!BARO.start(&BARO)) {
		BT_SendStr("Error initializing barometer!\r\n");
		while (1) {
			bstatusRed = true;
			statusRed_PutVal(bstatusRed);
		}
	}
	BARO.setTimeStandby(&BARO, TIME_STANDBY_1280MS);
	BARO.startNormalConversion(&BARO);
	// Get starting altitude
	float tempAlt = 0;
	BT_SendStr("Calibrating starting altitude...\r\n");
	for (uint8_t i = 0; i < 20; i++) {
		while (!BARO.getMeasurements(&BARO, &temperature, &pressure, &altitude)) {
			;
		}
		tempAlt += altitude;
		bstatusBlue = !bstatusBlue;
		statusBlue_PutVal(bstatusBlue);
	}
	setpoint.altitude = tempAlt / 20.0f;
	bstatusBlue = false;
	statusBlue_PutVal(bstatusBlue);
	snprintf(str, 128, "Starting altitude: %f\r\n", setpoint.altitude);
	BT_SendStr(str);

	New_BNO085(&IMU, BNO080_DEFAULT_ADDRESS);
	IMU.begin(&IMU);
	if (IMU.begin(&IMU) == false) {
		BT_SendStr("Error initializing IMU!\r\n");
		bstatusRed = true;
		statusRed_PutVal(bstatusRed);
		while (1) {
			;
		}
	}

	WAIT1_Waitms(5000);
	IMU.enableLinearAccelerometer(&IMU, 50);
	//IMU.enableAccelerometer(&IMU, 50);
	//IMU.enableRotationVector(&IMU, 100);
	IMU.enableRotationVector(&IMU, 100);
	IMU.enableGyro(&IMU, 50);

//	while (!bRunMainLoop) {
//		if (bbtCompleteCommand) {
//			bRunMainLoop = true;
//		}
//	}

	FC321_Reset();
	for (;;) {
		if (IMU.dataAvailable(&IMU)) {
			IMU.getLinAccel(&IMU, &lx, &ly, &lz, &linAccuracy);
			IMU.getGyro(&IMU, &p, &q, &r, &gyroAccuracy);
			roll = (float) (IMU.getRoll(&IMU)) * 180.0 / 3.14159f; // Convert roll to degrees
			pitch = (float) (IMU.getPitch(&IMU)) * 180.0 / 3.14159f; // Convert pitch to degrees
			yaw = (float) abs((IMU.getYaw(&IMU)) * 180.0 / 3.14159f); // Convert yaw to degrees
			bstatusGreen = !bstatusGreen;
			statusGreen_PutVal(bstatusGreen);
		}
		if (bGpsCompleteCommand) {
			gps.get_position(&gps, &lat, &lon, &age);
			long zone;
			char hemisphere;
			long res = Convert_Geodetic_To_UTM(lat * 0.0174533f,
					lon * 0.0174533f, &zone, &hemisphere, &easting, &northing);
			if (res == UTM_NO_ERROR) {
				GPSstats.x = (float) (GPSstats.prevEasting - easting);
				GPSstats.y = (float) (GPSstats.prevNorthing - northing);
				GPSstats.prevEasting = easting;
				GPSstats.prevNorthing = northing;
				if (!firstTime) {
					float gYaw = gps.course_to(&gps, prevLat, prevLon, lat,
							lon);
					// Velocity
					mps = gps.speed_mps(&gps);
					if (mps != -1.0) {
						GPSstats.dx = mps * cosf(gYaw);
						GPSstats.dy = mps * sinf(gYaw);
					}
				}
				prevLat = lat;
				prevLon = lon;
				firstTime = false;
				haveGps = true;
			} else {
				haveGps = false;
			}
			bGpsCompleteCommand = false;
			gpsIndex = 0;
		}
		if (BARO.getMeasurements(&BARO, &temperature, &pressure, &altitude)) {
			bstatusBlue = !bstatusBlue;
			statusBlue_PutVal(bstatusBlue);
		}

		if (BARO.err || IMU.err) {
			bstatusRed = true;
			statusRed_PutVal(bstatusRed);
			if (BARO.err) {
				// Barometer Error
				snprintf(str, 256, "Barometer error!\r\n");
				BT_SendStr(str);
			} else {
				// IMU error
				snprintf(str, 256, "IMU error!\r\n");
				BT_SendStr(str);
			}
		}

		// Rest of control loop
		FC321_GetTimeUS(&time);
		dt = time * 1e-6;
		/*
		 * Acceleration Handling
		 */
		float dcm[3][3];
		float phi = yaw * 0.0174533;
		float theta = pitch * 0.0174533;
		float psi = roll * 0.0174533;
		// Row, col
		dcm[0][0] = cosf(theta) * cosf(phi);
		dcm[0][1] = cosf(theta) * sinf(phi);
		dcm[0][2] = -sinf(theta);
		dcm[1][0] = sinf(psi) * sinf(theta) * cosf(phi) - cosf(psi) * sinf(phi);
		dcm[1][1] = sinf(psi) * sinf(theta) * sinf(phi) + cosf(psi) * cosf(phi);
		dcm[1][2] = sinf(psi) * cosf(theta);
		dcm[2][0] = cosf(psi) * sinf(theta) * cosf(phi) + sinf(psi) * sinf(phi);
		dcm[2][1] = cosf(psi) * sinf(theta) * sinf(phi) - sinf(psi) * cosf(phi);
		dcm[2][2] = cosf(psi) * cosf(theta);

		// Calculate dcm transpose
		float dcmT[3][3];
		for (uint8_t i = 0; i < 3; ++i) {
			for (uint8_t j = 0; j < 3; ++j) {
				dcmT[j][i] = dcm[i][j];
			}
		}

		float worldAcceleration[3];
		worldAcceleration[0] = dcmT[0][0] * lx + dcmT[0][1] * ly
				+ dcmT[0][2] * lz;

		worldAcceleration[1] = dcmT[1][0] * lx + dcmT[1][1] * ly
				+ dcmT[1][2] * lz;

		worldAcceleration[2] = dcmT[2][0] * lx + dcmT[2][1] * ly
				+ dcmT[2][2] * lz;

		/*
		 * VELOCITY ESTIMATE
		 */
		if (haveGps) {
			float measurements[4] = { GPSstats.dx, GPSstats.dy,
					worldAcceleration[0], worldAcceleration[1] };
			EstimatorVelocity.estimateVelocity(&EstimatorVelocity, measurements,
					dt);
			EstimatorVelocity.getVelocityEstimate(&EstimatorVelocity, &xMps,
					&yMps);
		} else {
			float measurements[4] = { 999999999, 999999999,
					worldAcceleration[0], worldAcceleration[1] };
			EstimatorVelocity.estimateVelocity(&EstimatorVelocity, measurements,
					dt);
			EstimatorVelocity.getVelocityEstimate(&EstimatorVelocity, &xMps,
					&yMps);
		}

		// Estimate XY position
		float worldVel[3];
		worldVel[0] = xMps;
		worldVel[1] = yMps;
		worldVel[2] += worldAcceleration[2] * dt;
		if (haveGps) {
			float measurements[4] = { GPSstats.x, GPSstats.y, xMps, yMps };
			EstimatorPosition.estimatePosition(&EstimatorPosition, measurements,
					dt);
			EstimatorPosition.getPositionEstimate(&EstimatorPosition, &xOff,
					&yOff);
		} else {
			float measurements[4] = { 999999999, 999999999, xMps, yMps };
			EstimatorPosition.estimatePosition(&EstimatorPosition, measurements,
					dt);
			EstimatorPosition.getPositionEstimate(&EstimatorPosition, &xOff,
					&yOff);
		}

		/*
		 * XY-to-world setpoint
		 */
		float PRcmd[2] = {0, 0};
		{
			float XYErr[2] = { (setpoint.x - xOff), (setpoint.y - yOff) };
			float P = 0.24;
			float P_xy[2] = { -P
					* clamp((XYErr[0] * cosf(yaw) - XYErr[1] * sinf(yaw)), -3,
							3), P
					* clamp((XYErr[0] * sinf(yaw) - XYErr[1] * cosf(yaw)), -3,
							3) };
			float D = 0.1;
			float D_xy[2] = { D * xMps, -D * yMps };
			// PD Controller
			PRcmd[0] = P_xy[0] + D_xy[0];
			PRcmd[1] = P_xy[1] + D_xy[1];
		}

		/*
		 * Attitude Controller
		 */
		float tau_pitch, tau_roll = 0;
		{
			float PRErr[2] = { (PRcmd[0] - pitch), (PRcmd[1] - roll) };
			// Proportional
			float P[2] = { 0.013, 0.01 };
			float P_pr[2] = { P[0] * PRErr[0], P[1] * PRErr[1] };
			// Integral
			float I = 0.01;
			float I_pr[2] = { I * clamp(PRErr[0] * dt, -2, 2), I * clamp(PRErr[1] * dt, -2, 2) };
			// Derivative
			float D[2] = { 0.002, 0.0028 };
			float D_pr[2] = { D[0] * q, D[1] * p };

			tau_pitch = P_pr[0] + I_pr[0] - D_pr[0];
			tau_roll = P_pr[1] + I_pr[1] - D_pr[1];
		}

		/*
		 * Yaw Controller
		 */
		float tau_yaw = 0;
		{
			float yawErr = setpoint.yaw - yaw;
			float P = 0.004;
			float P_yaw = P * yawErr;
			float D = -0.03 * 0.004;
			float D_yaw = D * r;
			tau_yaw = P_yaw + D_yaw;
		}


		float altitude_cmd = 0;
		{
			if(altitude >= setpoint.altitude) {
				bTakeoffFlag = false;
			}

			float w0 = -9.81f * 2.5f;
			if(bTakeoffFlag) {
				altitude_cmd = w0 * 0.45f;
			} else {
				float altErr = setpoint.altitude - altitude;
				float P = 0.8;
				float P_alt = P * altErr;
				float D = 0.3;
				float D_alt = D * worldVel[2];
				altitude_cmd = P_alt - D_alt;
			}

			altitude_cmd += w0;
			clamp(altitude_cmd, -(0.92 * 3.0f), (0.92 * 3.0f));
		}

		/*
		 * Servo mixing
		 */
//		// TODO: Scale the last term based on thrust to counteract gyroscopic effect
//		float s1 = tau_yaw + tau_roll - tau_pitch;
//		float s2 = tau_yaw - tau_roll + tau_pitch;
//		float s3 = tau_yaw - tau_roll + tau_pitch;
//		float s4 = tau_yaw + tau_roll - tau_pitch;

		// total thrust, yaw, pitch, roll
		float servoWeights[4] = { 1, -103.5736, 5.6659, 5.6659 };
		// -x, +x, -y, +y, edf
		float servoVals[5] = { 0, 0, 0, 0, 0 };
		servoVals[0] = servoWeights[0] / 2 * altitude_cmd
				+ servoWeights[1] * tau_yaw + servoWeights[3] * tau_roll;
		servoVals[1] = servoWeights[0] / 2 * altitude_cmd
				+ servoWeights[1] * tau_yaw - servoWeights[3] * tau_roll;
		servoVals[2] = servoWeights[0] / 2 * altitude_cmd
				+ servoWeights[1] * tau_yaw + servoWeights[4] * tau_pitch;
		servoVals[3] = servoWeights[0] / 2 * altitude_cmd
				+ servoWeights[1] * tau_yaw - servoWeights[4] * tau_pitch;
		servoVals[4] = servoWeights[0] * altitude_cmd;

		for(uint8_t i = 0; i < 4; i++) {
			servoVals[i] = clamp(servoVals[i] * 1530.7f, 0, 500) + 1500;
		}



		float edfServo = (clamp(servoVals[4] * 1530.7f, 0, 500) * 2) + 1000;
		float servo1 = clamp(1500 + servoVals[0], 1000, 2000); // servoScale(clamp(s1, 0, 500));
		float servo2 = clamp(1500 + servoVals[1], 1000, 2000); // servoScale(clamp(s2, 0, 500));
		XPos_SetPWMDutyUs(1500);
		XNeg_SetPWMDutyUs(1500);

		snprintf(str, 256, "altitude: %f, s5 %f, servo5: %f \r\n", altitude, servoVals[4],
				edfServo);
		BT_SendStr(str);
//		snprintf(str, 256,
//				"tau_yaw: %f, tau_pitch: %f tau_roll: %f, s1: %f, s2: %f, servo1: %f, servo2: %f, yaw: %f, pitch %f, roll %f\r\n",
//				tau_yaw, tau_roll, tau_pitch, s1, s2, 1500 + s1, 1500 + s2, yaw,
//				pitch, roll);
		// BT_SendStr(str);
		FC321_Reset();
		haveGps = false;
		WAIT1_Waitms(50);
	}
	/*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;){}
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/

/* END main */
/*!
 ** @}
 */
/*
 ** ###################################################################
 **
 **     This file was created by Processor Expert 10.5 [05.21]
 **     for the Freescale Kinetis series of microcontrollers.
 **
 ** ###################################################################
 */
