/*
 * BMP384.c
 *
 *  Created on: 13 Oct 2021
 *      Author: Will
 */

#ifndef SOURCES_BMP384_C_
#define SOURCES_BMP384_C_

#include "BMP384.h"

void New_BMP384(BMP384 *self, uint8_t devAddr) {
	self->devAddr = devAddr;
	self->start = &start;
}

uint8_t start(BMP384 *self) {
	if (!reset(self)) {
		return 0;
	}

	byte chipId;
	self->err = readByte(self->devAddr, BMP388_CHIP_ID, &chipId);
	if (chipId != BMP388_ID && chipId != BMP390_ID)       // Check the device ID
	{
		return 0;                             // If the ID is incorrect return 0
	}

	readBytes(self->devAddr, BMP388_TRIM_PARAMS, sizeof(self->params), (uint8_t*)&self->params);

}

uint8_t reset(BMP384 *self) {
	self->err = writeByte(self->devAddr, BMP388_CMD, RESET_CODE);
	for (uint32_t i = 0; i < 1000000; i++) {
		__asm("nop");
	}
	uint8_t data;
	self->err = readByte(self->devAddr, BMP388_EVENT, &data);
	self->event.reg = data;
	return self->event.bit.por_detected;
}

#endif /* SOURCES_BMP384_C_ */
