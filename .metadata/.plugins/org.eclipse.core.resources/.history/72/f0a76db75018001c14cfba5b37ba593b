/*
 * GPS.c
 *
 *  Created on: 18 Sep 2021
 *      Author: willi
 */

#include "GPS.h"

void NEW_GPS(GPS *self) {
	self->_time = GPS_INVALID_TIME;
	self->_date = GPS_INVALID_DATE;
	self->_latitude = GPS_INVALID_ANGLE;
	self->_longitude = GPS_INVALID_ANGLE;
	self->_altitude = GPS_INVALID_ALTITUDE;
	self->_speed = GPS_INVALID_SPEED;
	self->_course = GPS_INVALID_ANGLE;
	self->_hdop = GPS_INVALID_HDOP;
	self->_numsats = GPS_INVALID_SATELLITES;
	self->_last_time_fix = GPS_INVALID_FIX_TIME;
	self->_last_position_fix = GPS_INVALID_FIX_TIME;
	self->_parity = 0;
	self->_is_checksum_term = false;
	self->_sentence_type = _GPS_SENTENCE_OTHER;
	self->_term_number = 0;
	self->_term_offset = 0;
	self->_gps_data_good = false;
	self->_term[0] = '\0';

	self->encode = &encode;
}


bool encode(GPS *self, char c) {
	bool valid_sentence = false;

	switch(c) {
	case ',': // term terminators
		self->_parity ^= c;
	case '\r':
	case '\n':
	case '*':
		if(self->_term_offset < sizeof(self->_term)) {
			self->_term[self->_term_offset] = 0;
			valid_sentence = term_complete();
		}
		++self->_term_number;
		self->_term_offset = 0;
		self->_is_checksum_term = (c == '*');
		return valid_sentence;

	case '$': //sentence begin
		self->_term_number = self->_term_offset = 0;
		self->_parity = 0;
		self->_sentence_type = _GPS_SENTENCE_OTHER;
		self->_is_checksum_term = false;
		self->_gps_data_good = false;
		return valid_sentence;
	}

	// ordinary characters
	if(self->_term_offset < sizeof(self->_term) -1) self->_term[self->_term_offset++] = c;

}



