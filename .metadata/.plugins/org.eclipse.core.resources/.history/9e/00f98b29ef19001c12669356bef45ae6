/* ###################################################################
 **     Filename    : main.c
 **     Project     : Lab_03
 **     Processor   : MK22FN512VDC12
 **     Version     : Driver 01.01
 **     Compiler    : GNU C Compiler
 **     Date/Time   : 2021-08-13, 13:30, # CodeGen: 0
 **     Abstract    :
 **         Main module.
 **         This module contains user's application code.
 **     Settings    :
 **     Contents    :
 **         No public methods
 **
 ** ###################################################################*/
/*!
 ** @file main.c
 ** @version 01.01
 ** @brief
 **         Main module.
 **         This module contains user's application code.
 */
/*!
 **  @addtogroup main_module main module documentation
 **  @{
 */
/* MODULE main */

/* Including needed modules to compile this module/procedure */
#include "Cpu.h"
#include "Events.h"
#include "Pins1.h"
#include "CI2C1.h"
#include "IntI2cLdd1.h"
#include "MCUC1.h"
#include "BT.h"
#include "Inhr1.h"
#include "ASerialLdd1.h"
#include "FC321.h"
#include "RealTimeLdd1.h"
#include "TU1.h"
/* Including shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
#include "PDD_Includes.h"
#include "Init_Config.h"
#include "BNO085.h"
#include "Sensors.h"
#include <stdbool.h>
#include "printf.h"
#include <math.h>
/* User includes (#include below this line is not maintained by Processor Expert) */
#define BNO080_DEFAULT_ADDRESS 0x4A
#define PI 3.14159
#define RAD_TO_DEGREES 57.2958
#define MS_TO_GS 0.1019

float h;
float ax, ay, az;
float gx, gy, gz;
float gx_cal, gy_cal, gz_cal;
float mx, my, mz;
float angle_pitch, angle_roll, angle_yaw;
float angle_pitch_acc, angle_roll_acc, angle_yaw;
float pitch, roll, yaw;
uint8_t accelAccuracy, gyroAccuracy, magAccuracy;
float quatRadianAccuracy;
float tau = 0.98;
long timer1, timer2;
char str[128];
char level[32];
bool setGyroAngles;
unsigned int time;

char* getAccuracyLevel(uint8_t accuracyNumber) {
	if (accuracyNumber == 0) {
		snprintf(level, 32, "Unreliable");
	} else if (accuracyNumber == 1) {
		snprintf(level, 32, "Low");
	} else if (accuracyNumber == 2) {
		snprintf(level, 32, "Medium");
	} else if (accuracyNumber == 3) {
		snprintf(level, 32, "High");
	} else {
		snprintf(level, 32, "Unknown");
	}
	return level;
}

void sendBT() {
	snprintf(str, 128, "roll: %f, pitch: %f, yaw: %f, dt: %f\r\n", roll, pitch,
			yaw, time);
	BT_SendStr(str);
	for (int counter = 0; counter < 100000; counter++) {
		__asm volatile ("nop");
	}
}

/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
/*lint -restore Enable MISRA rule (6.3) checking. */
{
	/* Write your local variable definition here */

	/*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
	PE_low_level_init();
	/*** End of Processor Expert internal initialization.                    ***/

//	/* Write your code here */
	setGyroAngles = false;
//	/* For example: for(;;) { } */
	BNO085 IMU;
	New_BNO085(&IMU, BNO080_DEFAULT_ADDRESS);
	if (IMU.begin(&IMU) == false) {
		while (1)
			;
	}

	IMU.enableGameRotationVector(&IMU, 50);
	// TODO Own sensor fusion. Get mag, accel, gyro
	FC321_Reset();
	for (;;) {
		if (IMU.dataAvailable(&IMU)) {
			FC321_GetTimeUS(&time);
			float dt = time * 1e-6;
			roll = (float) (IMU.getRoll(&IMU)) * 180.0 / 3.14159; // Convert roll to degrees
			pitch = (float) (IMU.getPitch(&IMU)) * 180.0 / 3.14159; // Convert pitch to degrees
			yaw = (float) (IMU.getYaw(&IMU)) * 180.0 / 3.14159; // Convert yaw to degrees
			// quatRadianAccuracy = IMU.getQuatRadianAccuracy(&IMU); // Return the rotation vector accuracy
			// controller.calculate(&controller);
			sendBT();
			FC321_Reset();
		}
		//TODO: If GPS data

		// Rest of control loop
		// Estimate XY position
		/*
		 * DCM: Rotation order ZYX
		 */
		 float C[3][3];
	}
	/*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;){}
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/

/* END main */
/*!
 ** @}
 */
/*
 ** ###################################################################
 **
 **     This file was created by Processor Expert 10.5 [05.21]
 **     for the Freescale Kinetis series of microcontrollers.
 **
 ** ###################################################################
 */
