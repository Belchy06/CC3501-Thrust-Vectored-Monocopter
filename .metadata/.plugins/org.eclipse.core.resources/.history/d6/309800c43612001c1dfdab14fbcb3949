/* ###################################################################
 **     Filename    : main.c
 **     Project     : Lab_03
 **     Processor   : MK22FN512VDC12
 **     Version     : Driver 01.01
 **     Compiler    : GNU C Compiler
 **     Date/Time   : 2021-08-13, 13:30, # CodeGen: 0
 **     Abstract    :
 **         Main module.
 **         This module contains user's application code.
 **     Settings    :
 **     Contents    :
 **         No public methods
 **
 ** ###################################################################*/
/*!
 ** @file main.c
 ** @version 01.01
 ** @brief
 **         Main module.
 **         This module contains user's application code.
 */
/*!
 **  @addtogroup main_module main module documentation
 **  @{
 */
/* MODULE main */


/* Including needed modules to compile this module/procedure */
#include "Cpu.h"
#include "Events.h"
#include "Pins1.h"
#include "CI2C1.h"
#include "IntI2cLdd1.h"
#include "TU1.h"
#include "WAIT1.h"
#include "MCUC1.h"
#include "SERVO1.h"
#include "Pwm2.h"
#include "PwmLdd2.h"
#include "BT.h"
#include "Inhr1.h"
#include "ASerialLdd1.h"
/* Including shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
#include "PDD_Includes.h"
#include "Init_Config.h"
#include "BNO085.h"
#include "PID.h"
#include "Sensors.h"
#include <stdbool.h>
#include "printf.h"
#include "Controller.h"
/* User includes (#include below this line is not maintained by Processor Expert) */
#define BNO080_DEFAULT_ADDRESS 0x4A
#define PI 3.14159
#define RAD_TO_DEGRESS 57.2958

float h;
float ax, ay, az;
float gx, gy, gz;
float mx, my, mz;
float pitch, roll, yaw;
uint8_t accelAccuracy, gyroAccuracy, magAccuracy;
float quatRadianAccuracy;
Controller controller;

char str[128];
char level[32];

char* getAccuracyLevel(uint8_t accuracyNumber) {
	if(accuracyNumber == 0) {
		sprintf(level, "Unreliable");
	} else if(accuracyNumber == 1) {
		sprintf(level, "Low");
	} else if(accuracyNumber == 2) {
		sprintf(level, "Medium");
	} else if(accuracyNumber == 3) {
		sprintf(level, "High");
	} else {
		sprintf(level, "Unknown");
	}
	return level;
}

void sendBT() {
	sprintf(str, "roll: %f, pitch: %f, yaw: %f", roll, pitch, yaw);
	BT_SendStr(str);
	for (int counter = 0; counter < 100000; counter++) {
		__asm volatile ("nop");
	}

//	sprintf(str, "aX: %.2f, aY: %.2f, aZ: %.2f, accuracy: %s\r\n", ax, ay, az, getAccuracyLevel(accelAccuracy));
//	BT_SendStr(str);
//	for (int counter = 0; counter < 100000; counter++) {
//		__asm volatile ("nop");
//	}
//
//	sprintf(str, "gX: %.2f, gY: %.2f, gZ: %.2f, accuracy: %s\r\n", gx, gy, gz, getAccuracyLevel(gyroAccuracy));
//	BT_SendStr(str);
//	for (int counter = 0; counter < 100000; counter++) {
//		__asm volatile ("nop");
//	}
//
//	sprintf(str, "mX: %.2f, mY: %.2f, mZ: %.2f, accuracy: %s\r\n", mx, my, mz, getAccuracyLevel(magAccuracy));
//	BT_SendStr(str);
//	for (int counter = 0; counter < 100000; counter++) {
//		__asm volatile ("nop");
//	}
}

/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
/*lint -restore Enable MISRA rule (6.3) checking. */
{
	/* Write your local variable definition here */

	/*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
	PE_low_level_init();
	/*** End of Processor Expert internal initialization.                    ***/

//	/* Write your code here */
//	/* For example: for(;;) { } */

//	double x, y, z;
//	double setX, setY, setZ;
//	double outX, outY, outZ;
//	New_Controller(&controller);
	// Set the controller gains
//	controller.setGains(&controller);
//	controller.setXPoint(&controller, 0);
//	controller.setYPoint(&controller, 0);
//	controller.setZPoint(&controller, 0);
	// controller.setHPoint(&controller, 1);
	// Give the controller the memory addresses of the variables that will store our rotation and height data
	// controller.init(&controller, &x, &y, &z, &h);


	BNO085 IMU;
	New_BNO085(&IMU, BNO080_DEFAULT_ADDRESS);
	if(IMU.begin(&IMU) == false) {
		while(1)
			;
	}


	// IMU.enableRotationVector(&IMU, 50);
	IMU.enableAccelerometer(&IMU, 50);
	IMU.enableGyro(&IMU, 50);
	IMU.enableMagnetometer(&IMU, 50);
	// TODO Own sensor fusion. Get mag, accel, gyro
	for(;;) {
		if(IMU.dataAvailable(&IMU)) {
			// x = (double)(IMU.getRoll(&IMU)) * 180.0 / 3.14159; // Convert roll to degrees
			// y = (double)(IMU.getPitch(&IMU)) * 180.0 / 3.14159; // Convert pitch to degrees
			// z = (double)(IMU.getYaw(&IMU)) * 180.0 / 3.14159; // Convert yaw to degrees
			// quatRadianAccuracy = IMU.getQuatRadianAccuracy(&IMU); // Return the rotation vector accuracy
			// controller.calculate(&controller);
			IMU.getAccel(&IMU, &ax, &ay, &az, &accelAccuracy);
			IMU.getGyro(&IMU, &gx, &gy, &gz, &gyroAccuracy);
			IMU.getMag(&IMU, &mx, &my, &mz, &magAccuracy);


			float rotation_x = gx * RAD_TO_DEGREES;




			sendBT();

			// SERVO1_SetPWMDutyUs(outX);
//			float i = IMU.getQuatI(&IMU.sensor);
//			float j = IMU.getQuatJ(&IMU.sensor);
//			float k = IMU.getQuatK(&IMU.sensor);
//			float real = IMU.getQuatReal(&IMU.sensor);
//			quatRadianAccuracy = IMU.getQuatRadianAccuracy(&IMU.sensor);
		}
	}
	/*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;){}
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/

/* END main */
/*!
 ** @}
 */
/*
 ** ###################################################################
 **
 **     This file was created by Processor Expert 10.5 [05.21]
 **     for the Freescale Kinetis series of microcontrollers.
 **
 ** ###################################################################
 */
